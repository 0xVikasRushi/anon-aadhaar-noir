{"noir_version":"0.32.0+c679f01a19b02ad2ac2287c8e699b46887f7872c","hash":9694505815949369775,"abi":{"parameters":[{"name":"signalHash","type":{"kind":"field"},"visibility":"private"},{"name":"signalHashSquare","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{}},"bytecode":"H4sIAAAAAAAA/63QMQ6AMAhA0dZ4ICjQwuZVbKT3P4Jp2sFBXfQlhLD8gRiGOCdc7m6bmyAze0mOhDskqyrAUrOioqgcSYlcWYtVK2DI5NjEqMHw1IVvMP7Xgt5aZ2u5+cWrE3bvychJAQAA","debug_symbols":"NYxbCoAgEEX3Mt99FBWEW4mIqTQEGcVHEOLeG4v+7rmvDIfc0rlqUjaAmDMYu2PUlpgytK8VHFKlENFHEN0wNiDpYDVNpQGljQQx9mVhuNBr3Iys85ol2v83xni7L+HuAw==","file_map":{"53":{"source":"fn main(signalHash: Field, signalHashSquare: Field) {\n    // Enforce the constraint that signalHashSquare is the square of signalHash\n    assert(signalHashSquare == signalHash * signalHash);\n}\n\n#[test]\nfn test_valid_hash_square() {\n    // Define a valid signalHash and its square\n    let signalHash = 5;\n    let signalHashSquare = 25;\n\n    // Call the circuit with valid inputs\n    main(signalHash, signalHashSquare);\n}\n","path":"/Users/hridambasu/Downloads/anon-aadhaar-noir/anon-aadhaar-noir/signal/src/main.nr"}},"names":["main"]}